---
title: "Packaging Python software with pbr"
created: !!timestamp '2017-01-02 16:00:12'
image: /media/images/blog/2017/packages.jpg
tags:
    - Python
    - pbr
---

{% block excerpt %}
{% mark excerpt %}

Packaging Python has been a painful experience for long. The history of the
various distribution that Python offered along the years is really bumpy, and
both the user and developer experience has been pretty bad.

{% endmark %}
{% endblock %}

Fortunately, things improved a lot in the recent years, with the reconciliation
of _[setuptools](https://setuptools.readthedocs.io)_ and _distribute_.

Though in the context of the [OpenStack](http://openstack.org) project, a
solution on top of _setuptools_ has been already started a while back. Its
usage is now spread across a whole range of software and libraries.

This project is called _[pbr](http://docs.openstack.org/developer/pbr/)_, for
_Python Build Reasonableness_. Don't be afraid by the OpenStack colored themed
of the documentation – it is a bad habit of OpenStack folks to not advertise
their tooling in an agnostic fashion. The tool has no dependency with the cloud
platform, and can be used painlessly with any package.

# How it works

_pbr_ takes inspiration from _distutils2_ (a now abandoned project) and uses a
`setup.cfg` file to describe the packager's intents. This is how a `setup.py`
using _pbr_ looks like:

{% syntax python %}
import setuptools

setuptools.setup(setup_requires=['pbr'], pbr=True)
{% endsyntax %}

Two lines of code – it's that simple. The actual metadata that the setup
requires is stored in `setup.cfg`:

{% syntax %}
[metadata]
name = foobar
author = Dave Null
author-email = foobar@example.org
summary = Package doing nifty stuff
license = MIT
description-file =
    README.rst
home-page = http://pypi.python.org/pypi/foobar
requires-python = >=2.6
classifier = 
    Development Status :: 4 - Beta
    Environment :: Console
    Intended Audience :: Developers
    Intended Audience :: Information Technology
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Programming Language :: Python

[files]
packages =
    foobar
{% endsyntax %}

This syntax is way easier to write and read than the standard `setup.py`.

_pbr_ also offers other features such as:

- automatic dependency installation based on `requirements.txt`
- automatic documentation building and generation using Sphinx
- automatic generation of `AUTHORS` and `ChangeLog` files based on _git_ history
- automatic creation of the list of files to include using _git_
- version management based on _git_ tags

All of this comes with little to no effort on your part.

# Using flavors

One of the feature that I use a lot, is the definition of flavors. It's not
tied particularly to _pbr_ – it's actually provided by _setuptools_ and _pip_
themselves – but _pbr_ `setup.cfg` file makes it easy to use.

When distributing a software, it's common to have different drivers for it. For
example, your project could support both PostgreSQL or MySQL – but nobody is
going to use both at the same time. The usual trick to make it work is to add
the needed library to the requirements list (e.g. `requirements.txt`). The
upside is that the software will work directly with either RDBMS, but the
downside is that this will install both libraries, whereas only one is needed.
Using flavors, you can specify different scenarios:

{% syntax ini %}
[extras]
postgresql =
    psycopg2
mysql =
    pymysql
{% endsyntax %}

When installing your package, the user can then just pick the right flavor by
using _[pip](https://pip.pypa.io/)_ to install the package:

{% syntax %}
$ pip install foobar[postgresql]
{% endsyntax %}

This will install _foobar_, all its dependencies listed in `requirements.txt`,
plus whatever dependencies are listed in the `[extras]` section of `setup.cfg`
matching the flavor. You can also combine several flavors, e.g.:

{% syntax %}
$ pip install foobar[postgresql,mysql]
{% endsyntax %}

would install both flavors.

_pbr_ is well-maintained and in very active development, so if you have any
plans to distribute your software, you should seriously consider including
_pbr_ in those plans.

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
