---
title: "Python never gives up: the tenacity library"
created: !!timestamp '2017-03-02 15:01:00'
image: /media/images/blog/2017/jason.jpg
tags:
    - Python
---

{% block excerpt %}
{% mark excerpt %}

A couple of years ago,
I
[wrote about the Python _retrying_ library](https://julien.danjou.info/blog/2015/python-retrying).
This library was designed to retry to execute come task when a failure occured.

{% endmark %}
{% endblock %}

I started to spread usage of this library in various projects, such
as [Gnocchi](http://gnocchi.xyz), these last years. Unfortunately, it started
to get very hard to contribute and send patches to the upstream _retrying_
project. I spent several months trying to work with the original author. But
after a while, I had to come to the conclusion that I would be unable to fix
bugs and enhance it at the pace I would like to. Therefore, I had to take a
difficult decision and decided to fork the library.

# Here comes _tenacity_

I picked a new name and rewrote parts of the API of _retrying_ that were not
working correctly or were too complicated. I also fixed bugs with the help of
Joshua, and named this new library _tenacity_. It works in the same manner as
_retrying_ does, except that it is written in a more functional way and offers
some nifty new features.

# Basic usage

The basic usage is to use it as a decorator:

{% syntax python %}
import tenacity

@tenacity.retry
def do_something_and_retry_on_any_exception():
    pass
{% endsyntax %}

This will make the function `do_something_and_retry_on_any_exception` be called
over and over again until it stops raising an exception. It would have been
hard to design anything simpler. Obviously, this is a pretty rare case, as one
usually wants to e.g. wait some time between retries. For that, _tenacity_
offers a large panel of waiting methods:

{% syntax python %}
import tenacity

@tenacity.retry(wait=tenacity.wait_fixed(1))
def do_something_and_retry():
    do_something()
{% endsyntax %}

Or a simple exponential back-off method can be used instead:

{% syntax python %}
import tenacity

@tenacity.retry(wait=tenacity.wait_exponential())
def do_something_and_retry():
    do_something()
{% endsyntax %}

# Combination

What is especially interesting with _tenacity_, is that you can easily combine
several methods. For example, you can combine `tenacity.wait.wait_random` with
`tenacity.wait.wait_fixed` to wait a number of seconds defined in an interval:

{% syntax python %}
import tenacity

@tenacity.retry(wait=tenacity.wait_fixed(10) + wait.wait_random(0, 3))
def do_something_and_retry():
    do_something()
{% endsyntax %}

This will make the function being retried wait randomly between 10 and 13
seconds before trying again.

_tenacity_ offers more customization, such as retrying on some exceptions only.
You can retry every second to execute the function only if the exception raised
by `do_something` is an instance of `IOError`, e.g. a network communication
error.

{% syntax python %}
import tenacity

@tenacity.retry(wait=tenacity.wait_fixed(1),
                retry=tenacity.retry_if_exception_type(IOError))
def do_something_and_retry():
    do_something()
{% endsyntax %}

You can combine several condition easily by using the `|` or `&` binary
operators. They are used to make the code retry if an `IOError` exception is
raised, or if no result is returned. Also, a stop condition is added with the
`stop` keyword arguments. It allows to specify a condition unrelated to the
function result of exception to stop, such as a number of attemps or a delay.

{% syntax python %}
import tenacity

@tenacity.retry(wait=tenacity.wait_fixed(1),
                stop=tenacity.stop_after_delay(60),
                retry=(tenacity.retry_if_exception_type(IOError) |
                       tenacity.retry_if_result(lambda result: result == None))
def do_something_and_retry():
    do_something()
{% endsyntax %}

The functional approach of _tenacity_ makes it easy and clean to combine a lot
of condition for various use cases with simple binary operators.

# Standalone usage

_tenacity_ can also be used without decorator by using the object `Retrying`,
that implements its main behaviour, and usig its `call` method. This allows to
call any function with different retry conditions, or to retry any piece of
code that do not use the decorator at all â€“ like code from an external library.

{% syntax python %}
import tenacity

r = tenacity.Retrying(
    wait=tenacity.wait_fixed(1),
    retry=tenacity.retry_if_exception_type(IOError))
r.call(do_something)
{% endsyntax %}

This also allows you to re-use that object without creating one new each time,
saving some memory!

I hope you'll like it and will find it some use. Feel free to fork it, report
bug or ask for new features on [its GitHub](https://github.com/jd/tenacity)!

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
