---
title: The bad practice in FOSS projects management
created: !!timestamp '2016-06-09 15:49:00'
image: /media/images/blog/2016/mountain.jpg
tags:
    - Open Source
    - OpenStack
    - awesome
    - Debian
    - Emacs
    - GNU
---

{% block excerpt %}
{% mark excerpt %}

During the OpenStack summit a few weeks ago, I had the chance to talk to some
people about my experience on running open source projects. It turns out that
after hanging out in communities and contributing to many projects for years, I
may be able to provide some hindsight and an external eye to many of those who
are new to it.

{% endmark %}
{% endblock %}

There are plenty of resource explaining how to run an open source projects out
there. Today, I would like to take a different angle and emphasize what you
should not _socially_ do in your projects. This list comes from various open
source projects I encountered these past years. I'm going to go through some of
the bad practice I've spotted, in a random order, illustrated by some concrete
example.

## Seeing contributors as an annoyance

When software developers and maintainers are busy, there's one thing they don't
need: more work. To many people, the instinctive reactions to external
contribution is: damn, more work. And actually, it is.

Therefore, some maintainers tend to avoid that surplus of work: they state they
don't want contributions, or make contributors feel un-welcomed. This can take
a lot of different forms, from ignoring them to being unpleasant. It indeed
avoids the immediate need to deal with the work that has been added on the
maintainer shoulders.

This is one of the biggest mistake and misconception of open source. If people
are sending you more work, you should do whatever it takes to feel them welcome
so they continue working with you. They might pretty soon become the guys doing
the work you are doing instead of you. Think: retirement!

<img class="illustration pull-right"
     style="width: 96px;"
     src="/media/images/projects/openstack.png">

Let's take a look at my friend Gordon, who I saw starting as a Ceilometer
contributor in 2013. He was doing great code reviews, but he was actually
giving me more work by catching bugs in my patches and sending patches I had to
review. Instead of being a bully so he would stop making me rework my code and
reviews his patches,
[I requested that we trust him even more by adding him as a core reviewer](http://lists.openstack.org/pipermail/openstack-dev/2013-May/008975.html).
time contribution.

And if they don't do this one-time contribution, they won't make it two. They
won't make any. Those projects may have just lost their new maintainers.

## Letting people only do the grunt work

When new contributors arrive and want to contribute to a particular project,
they may have very different motivation. Some of them are users, but some of
them are just people looking to see how it is to contribute. Getting the thrill
of contribution, as an exercise, or as a willingness to learn and start
contributing back to the ecosystem they use.

The usual response from maintainers is to push people into doing grunt work.
That means doing jobs that have no interest, little value, and probably no
direct impact on the project.

Some people actually have no problem with it, some have. Some will feel
offended to do low impact work, and some will love it as soon as you give them
some sort of acknowledgment. Be aware of it, and be sure to high-five people
doing it. That's the only way to keep them around.

<img class="illustration"
     src="/media/images/blog/2016/computer-coding.jpg">

## Not valorizing small contributions

When the first patch that comes in from a new contributor is a typo fix, what
developers think? That they don't care, that you're wasting their precious time
with your small contribution. And nobody cares about bad English in the
documentation, don't they?

This is wrong. See my first contributions to
[home-assistant](https://github.com/home-assistant/home-assistant/commit/36cb12cd157b22bdc1fa28b700ca0fb751cca7a4)
and
[Postmodern](https://github.com/marijnh/Postmodern/commit/ec537f72393e1032853b78e0b7b4d0ff98632a02):
I fixed typos in the documentation.

I contributed to [Org-mode](http://orgmode.org) for a few years.
[My first patch to orgmode](http://repo.or.cz/org-mode.git/commit/a153f5a31dffbc6b78a8c5d8d027961abe585a38)
was about fixing a docstring. Then, I sent 56 patches, fixing bugs and adding
fancy features and also wrote a few external modules. To this day, I'm still #16
in the top-committer list of Org-mode who contains 390 contributors. So not
that would call a small contributor. I am sure the community is glad they did
not despise my documentation fix.

## Setting the bar too high for new comers

<img class="illustration pull-right"
     style="width: 25%;"
     src="/media/images/blog/2016/too-high.png">

When new contributors arrive, their knowledge about the project, its context,
and the technologies can vary largely. One of mistake people often make is to
ask contributors too complicated thing that they cannot realize. That scares
them away (many people are going to be shy or introvert) and they may just
disappear, feeling too stupid to help.

Before making any comment, you should not have any assumption about their
knowledge. That should avoid such situation. You also should be very delicate
when assessing their skills, as some people might feel vexed if you
underestimate them too much.

Once that level has been properly evaluated (a few exchanges should be enough),
you need to mentor to the right degree your contributor so it can blossom. It
takes time and experience to master this, and you may likely lose some of them
in the process, but it's a path every maintainer has to take.

Mentoring is a very important aspect of welcoming new contributors to your
project, whatever it is. Pretty sure that applies nicely outside free software
too.

## Requiring people to make sacrifices with their lives

<img class="illustration thumbnail pull-left"
     style="width: 30%;"
     src="/media/images/blog/2016/balance-stones.jpg">

This is an aspect that varies a lot depending on the project and context, but
it's really important. As a free software project, where most people will
contribute on their own good will and sometimes spare time, you must not
require them to make big sacrifices. This won't work.

<a name="sacrifices"></a>

One of the worst implementation of that is requiring people to fly 5 000
kilometers to meet in some place to discuss the project. This puts contributors
in an unfair position, based on their ability to leave their family for a week,
take a plane/boat/car/train, rent an hotel, etc. This is not good, and
everything should be avoided to *require* people to do that in order to
participate and feel included in the project and blend in your community. Don't
get me wrong: that does not me social activities should be prohibited, on the
contrary. Just avoid excluding people when you discuss any project.

The same apply to any other form of discussion that makes it complicated for
everyone to participate: IRC meetings (it's hard for some people to book an
hour, especially depending on the timezone they live in), video-conference
(especially using non-free software), etc.

Everything that requires people to basically interact with the project in a
synchronous manner for a period of time will put constraints on them that can
make them uncomfortable.

The best medium is still e-mail and asynchronous derivative (bug trackers,
etc), as it is asynchronous and allow people to work at their own pace at their
own time.

## Not having an (implicit) CoC

Codes of conduct seem to be a trendy topic (and a touchy subject), as more and
more communities are opening to a wilder audience than they used to be – which
is great.

Actually, all communities have a code of conduct, being written with black ink
or being carried in everyone's mind unconsciously. Its form is a matter of
community size and culture.

Now, depending on the size of your community and how you feel comfortable
applying it, you may want to have it composed in a document, e.g. like
[Debian did](https://www.debian.org/code_of_conduct).

Having a code of conduct does not transform your whole project community
magically into a bunch of carebears following its guidance. But it provides an
interesting point you can refer to as soon as you need. It can help throwing it
at some people, to indicate that their behavior is not welcome in the project,
and somehow, ease their potential exclusion – even if nobody wants to go that
far generally, and that's it's rarely that useful.

I don't think it's mandatory to have such a paper on smaller projects. But you
have to keep in mind that the implicit code of conduct will be derived from
*your* own behavior. The way your leader(s) will communicate with others will
set the entire social mood of the project. Do not underestimate that.

When we started the [Ceilometer](http://launchpad.net/ceilometer) project, we
implicitly followed the
[OpenStack Code of Conduct](https://www.openstack.org/legal/community-code-of-conduct/)
before it even existed, and probably set the bar a little higher. Being nice,
welcoming and open-minded, we achieved a descent score of diversity, having up
to 25% of our core team being women – way above the current ratio in OpenStack
and most open source projects!

<img class="illustration"
     src="/media/images/blog/2016/friends-beach.jpg">

## Making people not English native feeling like outsider

It's quite important to be aware of that the vast majority of free software
project out there are using English as the common language of communication. It
makes a lot of sense: it's a commonly spoken language, and it seems to do the
job correctly.

But a large part of the hackers out there are not native English speakers. Many
are not able to speak English fluently. That means the rate at which they can
communicate and run a conversation might be very low, which can make some
people frustrated, especially native English speaker.

The principal demonstration of this phenomena can be seen in social events
(e.g. conferences) where people are debating. It can be very hard for people to
explain their thoughts in English and to communicate properly at a decent rate,
making the conversation and the transmission of ideas slow. The worst thing
that one can see in this context is an English native speaker cutting people
off and ignoring them, just because they are talking too slowly. I do
understand that it can be frustrating, but the problem here is not the
non-native English speaking, it's the medium being used that does not make your
fellow on the same level of everyone by moving the conversation orally.

To a lesser extent, the same applies to IRC meetings, which are by relatively
synchronous. Completely asynchronous media do not have this flaw, that's why
they should also be preferred in my opinion.

## No vision, no delegation

Two of the most commonly encountered mistakes in open source projects: seeing
the maintainer struggling with the growth of its project while having people
trying to help.

Indeed, when the flow of contributor starts coming in, adding new features,
asking for feedback and directions, some maintainers choke and don't know how
to respond. That ends up frustrating contributors, which therefore may simply
vanish.

It's important to have a vision for your project and communicate it. Make it
clear for contributors what you want or don't want in your project.
Transferring that in a clear (and non-aggressive, please) manner, is a good way
of lowering the friction between contributors. They'll pretty soon know if they
want to join your ship or not, and what to expect. So be a good captain.

If they chose to work with you and contribute, you should start trusting them
as soon as you can and delegate some of your responsibilities. This can be
anything that you used to do: review patches targeting some subsystem, fixing
bugs, writing docs. Let people own an entire part of the project so they feel
responsible and care about it as much as you do. Doing the opposite, which is
being a control-freak, is the best shot at staying alone with your open source
software.

And no project is going to grow and be successful that way.

<img class="illustration pull-right"
     style="width: 96px;"
     src="/media/images/projects/awesome.png">

In 2009, when Uli Schlachter sent
[his first patch to awesome](http://article.gmane.org/gmane.comp.window-managers.awesome.devel/1746/match=uli+schlachter),
this was more work for me. I had to review this patch, and I was already pretty
busy designing the new versions of awesome and doing my day job! Uli's work was
not perfect, and I had to fix it myself. More work. And what did I do? A few
minutes later, I
[replied to him](http://article.gmane.org/gmane.comp.window-managers.awesome.devel/1747/match=uli+schlachter)
with a clear plan of what he should do and what I thought about his work.

In response, Uli sent patches and improved the project. Do you know what Uli
does today? He manages the awesome window manager project since 2010 instead of
me. I managed to transmit my vision, delegate, and then retired!

## Non-recognition of contributions

People contribute in different ways, and it's not always code. There's a lot of
things around a free software projects: documentation, bug triage, user
support, user experience design, communication, translation…

It took a while for example to [Debian](http://debian.org) to recognize that
their translators could have the status of Debian Developer.
[OpenStack](http://openstack.org) is working in the same direction by trying to
[recognize non-technical contributions](https://wiki.openstack.org/wiki/NonATCRecognition).

As soon as your project starts attributing badges to some people and creating
classes of different members in the community, you should be very careful that
you don't forget anyone. That's the easiest road to losing contributors along
the road.

<img class="illustration thumbnail"
     src="/media/images/blog/2016/heart-sign.jpg">

## Don't forget to be thankful

This whole list has been inspired by many years of open source hacking and free
software contributions. Everyone's experience and feeling might be different,
or malpractice may have been seen under different forms. Let me know and if
there's any other point that you encountered and blocked you to contribute to
open source projects!

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
