---
title: "Gnocchi 2.0 release"
created: !!timestamp '2016-02-19 15:58:00'
image: /media/images/blog/2016/pasta.jpg
tags:
    - Gnocchi
    - OpenStack
---

<figure class="pull-right illustration" style="width: 33%;">
  <img src="/media/images/gnocchi-logo-old.jpg">
</figure>

{% block excerpt %}
{% mark excerpt %}

A little more than 3 months after our latest minor release, here is the new
major version of Gnocchi, stamped
[2.0.0](https://launchpad.net/gnocchi/2.0/2.0.0). It contains a lot of new and
exciting features, and I'd like to talk about some of them to celebrate!

{% endmark %}
{% endblock %}

You may notice that this release happens in the middle of the OpenStack release
cycle. Indeed, Gnocchi does not follow that 6-months cycle, and we release
whenever our code is ready. That forces us to have a more iterative approach,
less disruptive for other projects and allow us to achieve a higher velocity.
Applying the good old mantra _release early, release often_.

## Documentation

<div class="illustration pull-right icon">
  <img src="/media/images/blog/2016/icon-documentation.png">
</div>

This version features a large documentation update. Gnocchi is still the only
OpenStack server project that implements a "no doc, no merge" policy, meaning
any code must come with the documentation addition or change included in the
patch. The full documentation is included in the source code and available
online at [gnocchi.xyz](http://gnocchi.xyz/).

## Data split & compression

<div class="illustration pull-right icon">
  <img src="/media/images/blog/2016/icon-compress.png">
</div>

I've already covered this change extensively in
[my last blog about timeseries compression](gnocchi-carbonara-timeserie-compression).
Long story short, Gnocchi now splits timeseries archives in small chunks that
are compressed, increasing speed and decreasing data size.

## Measures batching support

<div class="illustration pull-right icon">
  <img src="/media/images/blog/2016/icon-batch.png">
</div>

Gnocchi now supports batching, which allow submitting several measures for
different metric in a single request. This is especially useful in the context
where your application tends to cache metrics for a while and is able to send
them in a batch. Usage is
[fully documented for the REST API](http://gnocchi.xyz/rest.html#measures-batching).

## Group by support in aggregation

<div class="illustration pull-right icon">
  <img src="/media/images/blog/2016/icon-groups.png">
</div>

One of the most demanded features was the ability to do measure aggregation no
resource, using a group by type query. This is now possible using the
[new `groupby` parameter to aggregation queries](http://gnocchi.xyz/rest.html#aggregation-across-metrics).

## Ceph backend optimization

<div class="illustration pull-right icon">
  <img src="/media/images/blog/2016/icon-database.png">
</div>

We improved the Ceph back-end a lot. Mehdi Abaakouk wrote a new Python binding
for Ceph, called [Cradox](https://github.com/sileht/pycradox), that is going to
replace the current Python rados module in the subsequent Ceph releases.
Gnocchi makes usage of this new module to speed things up, making the Ceph
based driver really, really faster than before. We also implemented
asynchronous data deletion, which improves performance a bit.

The next step will be to run some new benchmarks
[like I did a few months ago](../2015/gnocchi-benchmarks) and compare with the
Gnocchi 1.3 series. Stay tuned!


{# Local Variables: #}
{# mode: markdown #}
{# End: #}
