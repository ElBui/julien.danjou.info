---
title: "The OpenStack Schizophrenia"
created: !!timestamp '2016-03-30 12:22:00'
image: /media/images/blog/2016/umbrella-rain.jpg
tags:
    - OpenStack
---

{% block excerpt %}
{% mark excerpt %}

When I started contributing to [OpenStack](http://openstack.org), almost five
years ago, it was a small ecosystem. There were no foundation, a handful of
projects and you could understand the code base in a few days.

{% endmark %}
{% endblock %}

Fast forward 2016, and it is a totally different beast. The project grew to
[no less than 54 teams](http://governance.openstack.org/reference/projects/index.html),
each team providing one or more deliverable. For example, the Nova and Swift
team each one produces one service and its client, whereas the Telemetry team
produces 3 services and 3 different clients.

In 5 years, OpenStack went to a few
[IaaS](https://en.wikipedia.org/wiki/Infrastructure_as_a_service) projects, to
54 different teams tackling different areas related to cloud computing. Once
upon a time, OpenStack was all about starting some virtual machines on a
network, backed by images and volumes. Nowadays, it's also about orchestrating
your network deployment over containers, while managing your application
life-cycle using a database service, everything being metered and billed for.

This exponential growth has been made possible with the decision of the
[OpenStack Technical Committee](http://governance.openstack.org/reference/charter.html)
to open the gates with
[the project structure reform voted at the end of 2014](http://governance.openstack.org/resolutions/20141202-project-structure-reform-spec.html).

This amendment suppresses the old OpenStack model of "integrated projects"
(i.e. Nova, Glance, Swift…). The big tent, as it's called, allowed OpenStack to
land new projects every month, growing from the 20 project teams of December
2014 to the 54 we have today – multiplying the number of projects by 2.7 in a
little more than a year.

Amazing growth, right?

And this was clearly a good change. I sat at the Technical Committee in 2013,
when projects were trying to apply to be "integrated", after Ceilometer and
Heat were. It was painful to see how the Technical Committee was trying to
assess whether new projects should be brought in or not.

But what I notice these days, is how OpenStack is still stuck between its old
and new models. On one side, it accepted a lot of new teams, but on the other
side, many are considered as second-class citizens. Efforts are made to
continue to build an OpenStack project that does not exist anymore.

For example, there is a team trying to define what's OpenStack core, named
[DefCore](https://github.com/openstack/defcore). That is looking to define
which projects are, somehow, actually OpenStack. This leads to weird
situations,
[such as having non-DefCore projects seeing their doc rejected from installation guides](http://lists.openstack.org/pipermail/openstack-dev/2016-March/090214.html).
Again,
[I reiterated my proposal](http://lists.openstack.org/pipermail/openstack-dev/2016-March/090231.html)
to publish documentation as part of each project code to solve that dishonest
situation and put everything on a level playing field

Some cross-projects specs are also pushed without implication of all OpenStack
projects. For example, The
[deprecate-cli](https://specs.openstack.org/openstack/openstack-specs/specs/deprecate-cli.html)
spec which proposes to deprecate command-line interface tools proposed by each
project had a lot of sense in the old OpenStack sense, where the goal was to
build a unified and ubiquitous cloud platform. But when you now have tens of
projects with largely different scopes, this start making less sense. Still,
this spec was merged by the OpenStack Technical Committee this cycle. Keystone
is the first project to proudly force users to rely on
[openstack-client](http://docs.openstack.org/developer/python-openstackclient/),
removing its old `keystone` command line tool.
I find it odd to push that specs when it's pretty clear that some projects
(e.g. Swift, Gnocchi…) have no intention to go down that path.

Unfortunately, most specs pushed by the Technical Committee are in the realm of
wishful thinking. It somehow makes sense, since only a few of the members are
actively contributing to OpenStack projects, and they can't by themselves
implement all of that magically. But OpenStack is no exception in the free
software world and remains a do-ocracy.

There is good cross-project content in OpenStack, such as
[the API working group](https://wiki.openstack.org/wiki/API_Working_Group).
While the work done should probably not be OpenStack specific, there's a lot
that teams have learned by building various HTTP REST API with different
frameworks. Compiling this knowledge and offering it as a guidance to various
teams is a great help.

My fellow developer [Chris Dent](https://anticdent.org) wrote a post about
[what he would do on the Technical Committee](https://anticdent.org/if-i-were-on-the-openstack-tc.html).
In this article, he points to a lot of the shortcomings I described here, and
his confusion between OpenStack being a product or being a kit is quite
understandable. Indeed, the message broadcasted by OpenStack is still very
confusing after the big tent openness. There's no enough user experience
improvement being done.

The OpenStack Technical Committee election is opened for April 2016, and from
what I read so far, many candidates are proposing to now clean up the big tent,
kicking out projects that do not match certain criteria anymore. This is
probably a good idea, there is some inactive project laying around. But I don't
think that will be enough to solve the identity crisis that OpenStack is
experiencing.

So this is why, once again this cycle, I will throw my hat in the ring and
submit my candidacy for OpenStack Technical Committee.

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
