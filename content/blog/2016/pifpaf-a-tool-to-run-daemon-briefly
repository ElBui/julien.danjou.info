---
title: "Pifpaf, or how to run any daemon briefly"
created: !!timestamp '2016-04-08 12:00:12'
image: /media/images/blog/2016/lights.jpg
tags:
    - OpenStack
    - Python
    - TDD
    - Pifpaf
---

{% block excerpt %}
{% mark excerpt %}

There's a lot of situation where you end up needing a software deployed
temporarily. This can happen when testing something manually, when running a
script or when launching a test suite.

{% endmark %}
{% endblock %}

Indeed, many applications need to use and interconnect with external software:
a RDBMS ([PostgreSQL](http://postgressql.org), [MySQL](http://mysql.org)…), a
cache ([memcached](http://memcached.org), [Redis](http://redis.io)…) or any
other external component. This tends to make more difficult running a software
(or its test suite). If you want to rely on this component being installed and
deployed, you end up needing a full environment set-up and properly configured
to run your tests. Which is discouraging.

The different [OpenStack](http://openstack.org) projects I work on ended up
pretty soon spawning some of their back-ends temporarily to run their tests.
Some of those unit tests somehow became entirely what you would call functional
or integration tests. But that's just a name. In the end, what we ended up
doing is testing that the software was really working. And there's no better
way doing that than talking to a real PostgreSQL instance rather than mocking
every call.

# Pifpaf to the rescue

To solve that issue, I created a new tool, named
*[Pifpaf](https://github.com/jd/pifpaf)*. _Pifpaf_ eases the run of any daemon
in a test mode for a brief moment, before making it disappear completely. It's
pretty easy to install as
[it is available on PyPI](http://pypi.python.org/pypi/pifpaf):

{% syntax %}
$ pip install pifpaf
Collecting pifpaf
[…]
Installing collected packages: pifpaf
Successfully installed pifpaf-0.0.7
{% endsyntax %}

You can then use it to run any of the listed daemons:
{% syntax %}
$ pifpaf list
+---------------+
| Daemons       |
+---------------+
| redis         |
| postgresql    |
| mongodb       |
| zookeeper     |
| aodh          |
| influxdb      |
| ceph          |
| elasticsearch |
| etcd          |
| mysql         |
| memcached     |
| rabbitmq      |
| gnocchi       |
+---------------+
{% endsyntax %}

_Pifpaf_ accepts any shell command line to execute after its arguments:

{% syntax %}
$ pifpaf run postgresql -- psql
Expanded display is used automatically.
Line style is unicode.
SET
psql (9.5.2)
Type "help" for help.

template1=# \l
                              List of databases
   Name    │ Owner │ Encoding │   Collate   │    Ctype    │ Access privileges
───────────┼───────┼──────────┼─────────────┼─────────────┼───────────────────
 postgres  │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │
 template0 │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │ =c/jd            ↵
           │       │          │             │             │ jd=CTc/jd
 template1 │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │ =c/jd            ↵
           │       │          │             │             │ jd=CTc/jd
(3 rows)

template1=# create database foobar;
CREATE DATABASE
template1=# \l
                              List of databases
   Name    │ Owner │ Encoding │   Collate   │    Ctype    │ Access privileges
───────────┼───────┼──────────┼─────────────┼─────────────┼───────────────────
 foobar    │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │
 postgres  │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │
 template0 │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │ =c/jd            ↵
           │       │          │             │             │ jd=CTc/jd
 template1 │ jd    │ UTF8     │ en_US.UTF-8 │ en_US.UTF-8 │ =c/jd            ↵
           │       │          │             │             │ jd=CTc/jd
(4 rows)

template1=# \q
{% endsyntax %}

What *pifpaf* does is that it runs the different commands needed to create a
new PostgreSQL cluster and then run PostgreSQL on a temporary port for you. So
your _psql_ session actually connects to a temporary PostgreSQL server, that is
trashed as soon as you quit _psql_. And all of that in less than 10 seconds,
without the use of any virtualization or container technology!

You can see what it does in detail using the _debug_ mode:

{% syntax %}
$ pifpaf --debug run mysql $SHELL
DEBUG: pifpaf.drivers: executing: ['mysqld', '--initialize-insecure', '--datadir=/var/folders/7k/pwdhb_mj2cv4zyr0kyrlzjx40000gq/T/tmpkut9bg']
DEBUG: pifpaf.drivers: executing: ['mysqld', '--datadir=/var/folders/7k/pwdhb_mj2cv4zyr0kyrlzjx40000gq/T/tmpkut9bg', '--pid-file=/var/folders/7k/pwdhb_mj2cv4zyr0kyrlzjx40000gq/T/tmpkut9bg/mysql.pid', '--socket=/var/folders/7k/pwdhb_mj2cv4zyr0kyrlzjx40000gq/T/tmpkut9bg/mysql.socket', '--skip-networking', '--skip-grant-tables']
DEBUG: pifpaf.drivers: executing: ['mysql', '--no-defaults', '-S', '/var/folders/7k/pwdhb_mj2cv4zyr0kyrlzjx40000gq/T/tmpkut9bg/mysql.socket', '-e', 'CREATE DATABASE test;']
[…]
$ exit
[…]
DEBUG: pifpaf.drivers: mysqld output: 2016-04-08T08:52:04.202143Z 0 [Note] InnoDB: Starting shutdown...
{% endsyntax %}

_Pifpaf_ also supports my pet project [Gnocchi](http://launchpad.net/gnocchi),
so you can run and try that timeseries database in a snap:

{% syntax %}
$ pifpaf run gnocchi $SHELL
$ gnocchi metric create
+------------------------------------+-----------------------------------------------------------------------+
| Field                              | Value                                                                 |
+------------------------------------+-----------------------------------------------------------------------+
| archive_policy/aggregation_methods | std, count, 95pct, min, max, sum, median, mean                        |
| archive_policy/back_window         | 0                                                                     |
| archive_policy/definition          | - points: 12, granularity: 0:05:00, timespan: 1:00:00                 |
|                                    | - points: 24, granularity: 1:00:00, timespan: 1 day, 0:00:00          |
|                                    | - points: 30, granularity: 1 day, 0:00:00, timespan: 30 days, 0:00:00 |
| archive_policy/name                | low                                                                   |
| created_by_project_id              | admin                                                                 |
| created_by_user_id                 | admin                                                                 |
| id                                 | ff825d33-c8c8-46d4-b696-4b1e8f84a871                                  |
| name                               | None                                                                  |
| resource/id                        | None                                                                  |
+------------------------------------+-----------------------------------------------------------------------+
$ exit
{% endsyntax %}

And it takes less than 10 seconds to launch Gnocchi on my laptop using
_pifpaf_. I'm then able to play with the `gnocchi` command line tool. It's by
far faster than using OpenStack [devstack](http://devstack.org) to deloy
everything the software.

# Using _pifpaf_ with your test suite

We leverage _Pifpaf_ in several of our OpenStack telemetry related projects
now, and even in [tooz](http://launchpad.net/tooz). For example, to run
unit/functional tests with a _memcached_ server available, a `tox.ini` file
should like this:

{% syntax ini %}
[testenv:py27-memcached]
commands = pifpaf run memcached -- python setup.py testr
{% endsyntax %}

The tests can then use the environment variable `PIFPAF_MEMCACHED_PORT` to
connect to _memcached_ and run tests using it. As soon as the tests are
finished, _memcached_ is killed by _pifpaf_ and the temporary data are trashed.

We move a few OpenStack projects to using _Pifpaf_ already, and I'm planning to
make use of it in a few more. My fellow developer
[Mehdi Abaakouk](http://sileht.net) added support for
[RabbitMQ](http://rabbitmq.com) in _Pifpaf_ and
[added support for more advanced tests](https://review.openstack.org/#/c/301771/6)
in [oslo.messaging](http://launchpad.net/oslo.messaging) (such as failure
scenarios) using _Pifpaf_.

_Pifpaf_ is a very small and handy tool. Give it a try and let me know how it
works for you!

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
