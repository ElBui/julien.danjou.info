---
title: "Gnocchi 3.0 release"
created: !!timestamp '2016-10-03 15:58:00'
image: /media/images/blog/2016/three-candle.jpg
tags:
    - Gnocchi
    - OpenStack
---

<figure class="pull-right illustration" style="width: 25%;">
  <img src="/media/images/gnocchi-logo-old.jpg">
</figure>

{% block excerpt %}
{% mark excerpt %}

After a few weeks of hard work with the team, here is the new major version of
Gnocchi, stamped [3.0.0](https://launchpad.net/gnocchi/3.0/3.0.0). It was very
challenging, as we wanted to implement a few big changes in it.

{% endmark %}
{% endblock %}

Gnocchi is now using [reno](http://docs.openstack.org/developer/reno/) to its
maximum and you can
read
[the release notes of the 3.0 branch](http://gnocchi.xyz/releasenotes/3.0.html)
online. Some notes might be missing as it is our first release with it, but we
are making good progress at writing changelogs for most of our user facing and
impacting changes.

Therefore, I'll only write here about our big major feature that made us bump
the major version number.

## New storage engine

And so the most interesting thing that went in the 3.0 release, is the new
storage engine that has been built by me and Gordon Chung during those last
months. The original approach of writing data in Gnocchi was really naive, so
we had an iterative improvement process since version 1.0, and we're getting
close to something very solid.

This new version leverages several important features which increase
performance by a large factor on Ceph (using `write(offset)` rather than
`read()+write()` to append new points), our recommended back-end.

<figure class="illustration" style="max-width: 65%;">
<img src="/media/images/blog/2016/gnocchi3_processtime_readwrite_vs_offset.png">
<figcaption>read+write (Swift and file drivers) vs offset (Ceph)</figcaption>
</figure>

To summarize, since most data points are sent sequentially and ordered, we
enhanced the data format to profit from that fact and be able to be appended
without reading anything. That only works on Ceph though, which provides the
needed features.

We also enabled data compression on all storage drivers by enabling LZ4
compression
([see my previous article and research on the subject](/blog/2016/gnocchi-carbonara-timeseries-compression)),
which obviously offers its own set of challenges when using append-only write.
The results are tremendous and decrease data usage by a huge factor:

<figure class="illustration" style="max-width: 65%;">
<img src="/media/images/blog/2016/gnocchi3_disksize.png">
<figcaption>Disk size comparison between GnocchiÂ 2 and GnocchiÂ 3</figcaption>
</figure>

The rest of the processing pipeline also has been largely improved:

<figure class="illustration" style="max-width: 65%;">
<img src="/media/images/blog/2016/gnocchi3_processtime_post.png">
<figcaption>Processing time of new measures</figcaption>
</figure>

<figure class="illustration" style="max-width: 65%;">
<img src="/media/images/blog/2016/gnocchi3_processtime_compress_offset.png">
<figcaption>Compression time comparison</figcaption>
</figure>

Overall, we're delighted with the performance improvement we achieved, and
we're looking forward making even better more progress. Gnocchi is now one of
the most performing and scalable timeseries databases out there.

## Upcoming challenges

With that big change done, we're now heading toward a set of more lightweight
improvements. Our [bug tracker](https://bugs.launchpad.net/gnocchi) is a good
place to learn what might be on our mind (check for the _wishlist_ bugs).

Improving our API features and offering a better experience for those coming
outside of the real of OpenStack are now on my top priority list.

But let me know if there's anything you have scratching you, obviously. ðŸ˜Ž

{# Local Variables: #}
{# mode: markdown #}
{# End: #}
